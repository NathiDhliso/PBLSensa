#!/bin/bash
# Script to automatically update environment configuration with AWS resource IDs
# Run this after Terraform deployment completes

set -e

echo "🔍 Fetching AWS resource IDs from Terraform outputs..."

# Navigate to Terraform directory
cd "$(dirname "$0")/../Development"

# Check if Terraform state exists
if [ ! -f ".terraform/terraform.tfstate" ]; then
    echo "❌ Error: Terraform state not found. Please run 'terraform apply' first."
    exit 1
fi

# Fetch Terraform outputs
echo "📊 Reading Terraform outputs..."
COGNITO_USER_POOL_ID=$(terraform output -raw cognito_user_pool_id 2>/dev/null || echo "")
COGNITO_CLIENT_ID=$(terraform output -raw cognito_client_id 2>/dev/null || echo "")
COGNITO_DOMAIN=$(terraform output -raw cognito_domain 2>/dev/null || echo "")
ALB_DNS_NAME=$(terraform output -raw alb_dns_name 2>/dev/null || echo "")
API_GATEWAY_URL=$(terraform output -raw api_gateway_url 2>/dev/null || echo "")
AWS_REGION=$(terraform output -raw aws_region 2>/dev/null || echo "eu-west-1")
RDS_ADDRESS=$(terraform output -raw rds_address 2>/dev/null || echo "")
RDS_PORT=$(terraform output -raw rds_port 2>/dev/null || echo "")
RDS_DATABASE_NAME=$(terraform output -raw rds_database_name 2>/dev/null || echo "")
REDIS_ENDPOINT=$(terraform output -raw redis_endpoint 2>/dev/null || echo "")
REDIS_PORT=$(terraform output -raw redis_port 2>/dev/null || echo "")
S3_PDF_BUCKET=$(terraform output -raw s3_pdf_uploads_bucket 2>/dev/null || echo "")
S3_ARTIFACTS_BUCKET=$(terraform output -raw s3_artifacts_bucket 2>/dev/null || echo "")
SQS_QUEUE_URL=$(terraform output -raw sqs_documents_queue_url 2>/dev/null || echo "")
ECR_API_REPO=$(terraform output -raw ecr_api_repository_url 2>/dev/null || echo "")
ECR_WORKER_REPO=$(terraform output -raw ecr_worker_repository_url 2>/dev/null || echo "")
DB_SECRET_ARN=$(terraform output -raw db_secret_arn 2>/dev/null || echo "")
API_KEYS_SECRET_ARN=$(terraform output -raw api_keys_secret_arn 2>/dev/null || echo "")

# Validate required outputs
if [ -z "$COGNITO_USER_POOL_ID" ] || [ -z "$COGNITO_CLIENT_ID" ]; then
    echo "❌ Error: Could not fetch Cognito configuration. Deployment may not be complete."
    exit 1
fi

echo "✅ Successfully fetched all resource IDs"
echo ""
echo "📝 Resource Summary:"
echo "  Cognito User Pool ID: $COGNITO_USER_POOL_ID"
echo "  Cognito Client ID: $COGNITO_CLIENT_ID"
echo "  ALB DNS: $ALB_DNS_NAME"
echo "  API Gateway URL: $API_GATEWAY_URL"
echo "  AWS Region: $AWS_REGION"
echo ""

# Navigate to project root
cd ../..

# Update .env.local
echo "📝 Updating .env.local..."
cat > .env.local << EOF
# Local Development Environment Variables
# Auto-generated by update-env-config.sh on $(date)

# API Configuration
VITE_API_BASE_URL=http://${ALB_DNS_NAME}
VITE_API_TIMEOUT=30000

# AWS Cognito Configuration
VITE_AWS_REGION=${AWS_REGION}
VITE_COGNITO_USER_POOL_ID=${COGNITO_USER_POOL_ID}
VITE_COGNITO_CLIENT_ID=${COGNITO_CLIENT_ID}

# Feature Flags
VITE_ENABLE_MOCK_API=false
VITE_ENABLE_API_LOGGING=true
EOF

echo "✅ Updated .env.local"

# Create .env.development for backend services
echo "📝 Creating .env.development for backend..."
cat > .env.development << EOF
# Backend Development Environment Variables
# Auto-generated by update-env-config.sh on $(date)

# Environment
ENVIRONMENT=development
AWS_REGION=${AWS_REGION}

# Database Configuration
DB_HOST=${RDS_ADDRESS}
DB_PORT=${RDS_PORT}
DB_NAME=${RDS_DATABASE_NAME}
DB_SECRET_ARN=${DB_SECRET_ARN}

# Redis Configuration
REDIS_HOST=${REDIS_ENDPOINT}
REDIS_PORT=${REDIS_PORT}

# S3 Configuration
S3_UPLOAD_BUCKET=${S3_PDF_BUCKET}
S3_ARTIFACTS_BUCKET=${S3_ARTIFACTS_BUCKET}

# SQS Configuration
SQS_QUEUE_URL=${SQS_QUEUE_URL}

# Secrets
API_KEYS_SECRET_ARN=${API_KEYS_SECRET_ARN}

# Cognito Configuration
COGNITO_USER_POOL_ID=${COGNITO_USER_POOL_ID}
COGNITO_CLIENT_ID=${COGNITO_CLIENT_ID}
COGNITO_DOMAIN=${COGNITO_DOMAIN}

# ECR Repositories
ECR_API_REPOSITORY=${ECR_API_REPO}
ECR_WORKER_REPOSITORY=${ECR_WORKER_REPO}
EOF

echo "✅ Created .env.development"

# Create infrastructure outputs file
echo "📝 Creating infrastructure-outputs.json..."
cat > infra/infrastructure-outputs.json << EOF
{
  "lastUpdated": "$(date -u +"%Y-%m-%dT%H:%M:%SZ")",
  "environment": "development",
  "cognito": {
    "userPoolId": "${COGNITO_USER_POOL_ID}",
    "clientId": "${COGNITO_CLIENT_ID}",
    "domain": "${COGNITO_DOMAIN}",
    "region": "${AWS_REGION}"
  },
  "api": {
    "albDnsName": "${ALB_DNS_NAME}",
    "apiGatewayUrl": "${API_GATEWAY_URL}",
    "baseUrl": "http://${ALB_DNS_NAME}"
  },
  "database": {
    "host": "${RDS_ADDRESS}",
    "port": ${RDS_PORT},
    "name": "${RDS_DATABASE_NAME}",
    "secretArn": "${DB_SECRET_ARN}"
  },
  "cache": {
    "host": "${REDIS_ENDPOINT}",
    "port": ${REDIS_PORT}
  },
  "storage": {
    "pdfBucket": "${S3_PDF_BUCKET}",
    "artifactsBucket": "${S3_ARTIFACTS_BUCKET}"
  },
  "queue": {
    "documentsQueueUrl": "${SQS_QUEUE_URL}"
  },
  "secrets": {
    "dbCredentials": "${DB_SECRET_ARN}",
    "apiKeys": "${API_KEYS_SECRET_ARN}"
  },
  "ecr": {
    "apiRepository": "${ECR_API_REPO}",
    "workerRepository": "${ECR_WORKER_REPO}"
  }
}
EOF

echo "✅ Created infrastructure-outputs.json"

echo ""
echo "🎉 Configuration update complete!"
echo ""
echo "📋 Next steps:"
echo "  1. Review the updated .env.local file"
echo "  2. Update API keys in AWS Secrets Manager:"
echo "     aws secretsmanager put-secret-value \\"
echo "       --secret-id ${API_KEYS_SECRET_ARN} \\"
echo "       --secret-string '{\"llamaparse\":\"YOUR_KEY\",\"elevenlabs\":\"YOUR_KEY\",\"brainfm\":\"YOUR_KEY\"}'"
echo "  3. Build and push Docker images to ECR"
echo "  4. Start your frontend: npm run dev"
echo ""

# PowerShell script to automatically update environment configuration with AWS resource IDs
# Run this after Terraform deployment completes

Write-Host "üîç Fetching AWS resource IDs from Terraform outputs..." -ForegroundColor Cyan

# Navigate to Terraform directory
$scriptPath = Split-Path -Parent $MyInvocation.MyCommand.Path
Set-Location "$scriptPath\..\Development"

# Check if Terraform state exists
if (-not (Test-Path ".terraform\terraform.tfstate")) {
    Write-Host "‚ùå Error: Terraform state not found. Please run 'terraform apply' first." -ForegroundColor Red
    exit 1
}

# Fetch Terraform outputs
Write-Host "üìä Reading Terraform outputs..." -ForegroundColor Cyan

try {
    $COGNITO_USER_POOL_ID = terraform output -raw cognito_user_pool_id 2>$null
    $COGNITO_CLIENT_ID = terraform output -raw cognito_client_id 2>$null
    $COGNITO_DOMAIN = terraform output -raw cognito_domain 2>$null
    $ALB_DNS_NAME = terraform output -raw alb_dns_name 2>$null
    $API_GATEWAY_URL = terraform output -raw api_gateway_url 2>$null
    $AWS_REGION = terraform output -raw aws_region 2>$null
    if ([string]::IsNullOrEmpty($AWS_REGION)) { $AWS_REGION = "eu-west-1" }
    $RDS_ADDRESS = terraform output -raw rds_address 2>$null
    $RDS_PORT = terraform output -raw rds_port 2>$null
    $RDS_DATABASE_NAME = terraform output -raw rds_database_name 2>$null
    $REDIS_ENDPOINT = terraform output -raw redis_endpoint 2>$null
    $REDIS_PORT = terraform output -raw redis_port 2>$null
    $S3_PDF_BUCKET = terraform output -raw s3_pdf_uploads_bucket 2>$null
    $S3_ARTIFACTS_BUCKET = terraform output -raw s3_artifacts_bucket 2>$null
    $SQS_QUEUE_URL = terraform output -raw sqs_documents_queue_url 2>$null
    $ECR_API_REPO = terraform output -raw ecr_api_repository_url 2>$null
    $ECR_WORKER_REPO = terraform output -raw ecr_worker_repository_url 2>$null
    $DB_SECRET_ARN = terraform output -raw db_secret_arn 2>$null
    $API_KEYS_SECRET_ARN = terraform output -raw api_keys_secret_arn 2>$null
} catch {
    Write-Host "‚ùå Error fetching Terraform outputs: $_" -ForegroundColor Red
    exit 1
}

# Validate required outputs
if ([string]::IsNullOrEmpty($COGNITO_USER_POOL_ID) -or [string]::IsNullOrEmpty($COGNITO_CLIENT_ID)) {
    Write-Host "‚ùå Error: Could not fetch Cognito configuration. Deployment may not be complete." -ForegroundColor Red
    exit 1
}

Write-Host "‚úÖ Successfully fetched all resource IDs" -ForegroundColor Green
Write-Host ""
Write-Host "üìù Resource Summary:" -ForegroundColor Cyan
Write-Host "  Cognito User Pool ID: $COGNITO_USER_POOL_ID"
Write-Host "  Cognito Client ID: $COGNITO_CLIENT_ID"
Write-Host "  ALB DNS: $ALB_DNS_NAME"
Write-Host "  API Gateway URL: $API_GATEWAY_URL"
Write-Host "  AWS Region: $AWS_REGION"
Write-Host ""

# Navigate to project root
Set-Location "..\..\"

# Update .env.local
Write-Host "üìù Updating .env.local..." -ForegroundColor Cyan
$envLocalContent = @"
# Local Development Environment Variables
# Auto-generated by update-env-config.ps1 on $(Get-Date -Format "yyyy-MM-dd HH:mm:ss")

# API Configuration
VITE_API_BASE_URL=http://$ALB_DNS_NAME
VITE_API_TIMEOUT=30000

# AWS Cognito Configuration
VITE_AWS_REGION=$AWS_REGION
VITE_COGNITO_USER_POOL_ID=$COGNITO_USER_POOL_ID
VITE_COGNITO_CLIENT_ID=$COGNITO_CLIENT_ID

# Feature Flags
VITE_ENABLE_MOCK_API=false
VITE_ENABLE_API_LOGGING=true
"@

$envLocalContent | Out-File -FilePath ".env.local" -Encoding UTF8
Write-Host "‚úÖ Updated .env.local" -ForegroundColor Green

# Create .env.development for backend services
Write-Host "üìù Creating .env.development for backend..." -ForegroundColor Cyan
$envDevContent = @"
# Backend Development Environment Variables
# Auto-generated by update-env-config.ps1 on $(Get-Date -Format "yyyy-MM-dd HH:mm:ss")

# Environment
ENVIRONMENT=development
AWS_REGION=$AWS_REGION

# Database Configuration
DB_HOST=$RDS_ADDRESS
DB_PORT=$RDS_PORT
DB_NAME=$RDS_DATABASE_NAME
DB_SECRET_ARN=$DB_SECRET_ARN

# Redis Configuration
REDIS_HOST=$REDIS_ENDPOINT
REDIS_PORT=$REDIS_PORT

# S3 Configuration
S3_UPLOAD_BUCKET=$S3_PDF_BUCKET
S3_ARTIFACTS_BUCKET=$S3_ARTIFACTS_BUCKET

# SQS Configuration
SQS_QUEUE_URL=$SQS_QUEUE_URL

# Secrets
API_KEYS_SECRET_ARN=$API_KEYS_SECRET_ARN

# Cognito Configuration
COGNITO_USER_POOL_ID=$COGNITO_USER_POOL_ID
COGNITO_CLIENT_ID=$COGNITO_CLIENT_ID
COGNITO_DOMAIN=$COGNITO_DOMAIN

# ECR Repositories
ECR_API_REPOSITORY=$ECR_API_REPO
ECR_WORKER_REPOSITORY=$ECR_WORKER_REPO
"@

$envDevContent | Out-File -FilePath ".env.development" -Encoding UTF8
Write-Host "‚úÖ Created .env.development" -ForegroundColor Green

# Create infrastructure outputs JSON
Write-Host "üìù Creating infrastructure-outputs.json..." -ForegroundColor Cyan
$infraOutputs = @{
    lastUpdated = (Get-Date).ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ssZ")
    environment = "development"
    cognito = @{
        userPoolId = $COGNITO_USER_POOL_ID
        clientId = $COGNITO_CLIENT_ID
        domain = $COGNITO_DOMAIN
        region = $AWS_REGION
    }
    api = @{
        albDnsName = $ALB_DNS_NAME
        apiGatewayUrl = $API_GATEWAY_URL
        baseUrl = "http://$ALB_DNS_NAME"
    }
    database = @{
        host = $RDS_ADDRESS
        port = [int]$RDS_PORT
        name = $RDS_DATABASE_NAME
        secretArn = $DB_SECRET_ARN
    }
    cache = @{
        host = $REDIS_ENDPOINT
        port = [int]$REDIS_PORT
    }
    storage = @{
        pdfBucket = $S3_PDF_BUCKET
        artifactsBucket = $S3_ARTIFACTS_BUCKET
    }
    queue = @{
        documentsQueueUrl = $SQS_QUEUE_URL
    }
    secrets = @{
        dbCredentials = $DB_SECRET_ARN
        apiKeys = $API_KEYS_SECRET_ARN
    }
    ecr = @{
        apiRepository = $ECR_API_REPO
        workerRepository = $ECR_WORKER_REPO
    }
}

$infraOutputs | ConvertTo-Json -Depth 10 | Out-File -FilePath "infra\infrastructure-outputs.json" -Encoding UTF8
Write-Host "‚úÖ Created infrastructure-outputs.json" -ForegroundColor Green

Write-Host ""
Write-Host "üéâ Configuration update complete!" -ForegroundColor Green
Write-Host ""
Write-Host "üìã Next steps:" -ForegroundColor Cyan
Write-Host "  1. Review the updated .env.local file"
Write-Host "  2. Update API keys in AWS Secrets Manager:"
Write-Host "     aws secretsmanager put-secret-value ``" -ForegroundColor Yellow
Write-Host "       --secret-id $API_KEYS_SECRET_ARN ``" -ForegroundColor Yellow
Write-Host "       --secret-string '{\"llamaparse\":\"YOUR_KEY\",\"elevenlabs\":\"YOUR_KEY\",\"brainfm\":\"YOUR_KEY\"}'" -ForegroundColor Yellow
Write-Host "  3. Build and push Docker images to ECR"
Write-Host "  4. Start your frontend: npm run dev"
Write-Host ""
